public class MinimumAbsuluteSumDiffrence1 {
    public static void main(String[] args) {
        int num1[]={76,1637,1716,1448,714,255,204,98,1307,1742,105,322,1124,43,1970,1603,1805,805,433,1012,1779,1708,1141,1369,1847,1223,384,1338,1790,367,986,1171,303,1650,1356,1458,1640,562,342,1213,1273,403,938,201,1815,736,1326,1220,1947,710,1550,156,833,23,744,1381,1705,1657,1998,312,633,884,1943,1758,136,1432,415,841,917,820,1154,1067,286,1040,437,205,698,693,269,90,63,783,1525,545,476,1826,1021,454,1489,898,1302,1713,1490,793,535,350,1176,645,1867,668,1887,1896,1200,398,505,950,746,269,1978,1802,1454,1507,410,881,1063,674,246,1869,1956,283,319,1668,328,135,457,15,841,1666,798,571,610,1627,745,267,1425,325,171,1972,1785,409,713,175,1153,225,91,1243,1715,655,526,57,1150,644,1860,766,1493,553,1551,244,557,650,1834,1641,1923,22,832,495,852,352,674,1402,1699,1793,341,1701,790,1540,1826,1725,185,520,1621,1445,1354,466,462,1680,827,792,403,634,532,791,428,1904,398,1309,645,291,425,64,1792,616,711,1206,1152,187,334,666,1487,1800,1562,382,681,401,936,1059,559,443,1516,595,1493,1184,461,1495,644,254,84,561,761,1287,704,964,148,1375,1893,1046,1354,1361,744,437,1795,1323,1012,1504,476,1213,649,1353,502,542,824,553,454,1974,1192,1020,1395,1509,1571,465,907,891,1866,1404,286,1822,237,868,1,728,1988,68,621,534,857,1998,926,1785,91,1891,724,777,1933,1645,533,541,1189,773,1976,1332,141,557,1659,736,1702,888,63,949,352,1069,535,14,258,1624,1453,1289,568,1896,797,1638,1248,834,808,1100,877,1692,594,1732,532,1011,67,1004,690,1062,746,533,1156,1769,1254,1669,460,434,779,261,291,1087,627,292,1698,543,1243,675,1255,260,722,1079,1303,1208,1421,315,1686,373,197,187,192,1051,1511,842,788,781,19,972,1172,1364,638,125,278,1755,400,168,181,1202,567,1952,865,331,514,667,11,16,1110,1138,730,651,813,1699,1545,1676,1682,143,6,1046,598,1004,1941,1410,702,1716,187,1611,1107,1156,339,753,1153,1070,909,1590,920,199,1417,1092,910,202,128,485,443,435,1260,777,1067,533,139,532,1152,1524,1376,973,413,924,210,720,1772,344,1643,460,537,1852,906,1734,1989,1628,322,1028,452,1890,729,131,767,443,1465,1810,931,1723,594,1125,688,1909,1702,835,58,324,1852,1064,1964,1205,1646,436,640,666,459,538,456,1752,373,801,984,1434,1460,230,1082,1388,673,312,1080,1809,1932,1563,1830,686,1526,166,1078,108,1768,1941,1169,1130,282,712,229,1800,317,929,1601,525,1602,1002,139,1218,1169,1805,298,1317,1011,1738,13,1735,1095,197,354,1998,1841,981,1295,1316,1462,566,29,54,1873,632,456,1159,850,990,928,282,426,607,1163,1707,1088,264,481,1894,991,1160,303,1598,1109,1763,421,72,1717,1216,151,141,358,539,495,1372,1891,1460,857,1029,41,110,1718,975,1643,977,922,820,529,1864,1775,1935,741,499,911,1877,1685,1382,269,1817,1380,1656,1933,390,729,309,1208,1785,1118,845,585,548,258,1603,706,173,1671,318,1432,253,725,11,242,1569,5,1594,718,1900,1847,1789,1292,1763,205,1932,1618,255,1694,1939,118,1151,1028,514,1175,1236,1485,1628,1476,1059,542,1224,787,1158,219,195,1564,1611,1680,1133,1147,611,1308,104,1266,1749,417,1596,724,9,293,1413,1099,477,1172,1347,547,1763,859,265,1693,737,670,1438,1773,1536,1779,592,268,1725,1045,652,311,1643,1091,295,813,1839,1086,1048,229,1378,1182,795,1638,83,254,1376,702,1651,363,1674,1707,1623,89,785,485,233,1950,1456,34,1959,693,375,1936,1939,908,250,479,1873,1974,1841,420,1404,634,1302,72,210,594,1946,1558,803,365,1168,1488,822,1214,240,939,1251,1195,1429,159,1210,1902,607,600,827,1783,1938,119,1148,152,374,738,279,1768,997,1423,1480,897,320,653,739,850,138,1084,748,77,1163,2000,974,362,1534,321,293,34,803,30,19,1893,478,278,271,1380,1431,237,273,392,1864,29,1367,1946,1378,1138,1364,184,1432,461,507,1862,530,1682,632,1915,411,1050,872,1136,499,1570,380,564,607,1578,1770,731,180,1127,1116,394,1967,609,959,1981,384,1782,196,353,1674,437,1283,1834,165,851,1843,1166,1853,26,227,1800,1152,949,1621,1975,675,1797,1021,1196,638,1695,1847,1279,1755,1804,494,554,219,503,1909,492,1713,979,1410,1176,1045,754,1374,116,962,543,791,1307,1833,1974,302,1915,956,1558,553,615,1971,149,658,470,827,332,1830,1602,610,839,1255,586,940,903,74,1920,529,1024,842,1308,300,283,1843,1784,1230,1909,1671,561,1033,637,1741,1212,1733,778,1821,1471,1631,1299,1206,1444,1205,1941,904,1002,667,177,842,1715,1593,140,1477,1974,970,1773,1047,1743,1647,562,289,1242,1642,427,345,1596,1556,557,1065,938,999,1424,1710,784,500,1346,378,491,1822,850,434,128,829,502,897,195,765,1461,1219,544,540,1661,1403,1365,1904,1935,510,758,990,1006,1429,1912,148,1348,815,1942,1376,1437,1580,1888,950,1657,419,806,446,590,1869,434,1092,1876,1256,235,214,551,1573,1491,1322};
        int num2[]={929,1041,1319,857,221,438,70,926,68,1953,1147,808,1831,1651,1889,307,621,757,1623,1184,1440,1393,1363,1589,877,1270,892,842,1143,1929,655,221,1189,1614,268,79,1231,179,294,1909,1765,918,790,1495,1513,586,968,404,464,1270,861,556,180,597,87,1909,1493,1191,336,455,371,911,20,864,1670,195,322,672,1031,496,511,350,52,1811,339,1378,1775,384,1386,1112,1728,287,116,1219,222,1609,1109,728,522,80,917,191,1781,1765,1650,630,484,256,1481,957,1587,1563,1041,43,752,887,1504,23,299,1237,1476,1936,1949,238,1276,918,190,1101,1707,1262,1981,543,1308,1506,1243,106,1305,1215,592,1955,1362,869,1253,1782,588,1627,841,946,847,776,1917,1258,1656,1227,1815,709,149,1779,162,591,11,1112,732,646,723,1473,1783,702,361,1931,1641,1998,1660,424,1996,864,1777,1662,143,244,1312,1204,1539,1102,1492,792,95,1364,159,780,764,289,1301,1492,1561,1764,1068,1082,504,706,274,475,591,1775,1991,327,1401,1673,1775,1556,866,1582,993,187,1231,881,171,218,1475,1017,1579,1280,1771,1714,471,773,867,1194,1862,1871,1662,116,1957,158,1555,297,356,129,202,1458,438,334,835,447,1300,990,208,787,1722,1006,262,870,1832,1792,879,1538,1571,1400,667,1078,1474,831,1898,86,865,676,260,1417,65,230,1985,778,6,1403,1489,1943,328,1260,998,629,99,582,373,202,1191,906,329,817,728,1742,591,714,654,1803,699,616,1910,109,354,1377,1888,1718,717,417,1264,1323,189,1255,1789,261,817,1366,100,913,113,213,614,368,1815,1456,1222,1784,657,245,76,705,1937,88,549,618,29,336,1904,1761,751,1703,1218,1502,1605,253,708,409,1730,342,912,1887,635,1720,1607,305,347,510,1949,1589,1264,200,955,915,1868,40,157,1817,165,998,1346,1144,53,1885,1423,197,1099,891,331,969,1416,981,1332,1008,1010,1154,825,1694,85,651,190,677,429,721,1196,353,1133,87,494,1100,1259,1523,1060,570,977,289,116,351,1342,1505,452,1587,1939,628,546,933,1159,563,844,661,803,1400,1608,345,550,1106,1549,393,1219,997,168,1315,654,1384,1048,823,1490,933,386,988,1694,813,782,761,1747,1474,1353,1629,616,1147,321,1416,1431,963,715,112,877,1498,1920,957,1998,1923,171,156,846,1204,1389,1072,1945,1913,170,284,1596,1921,1114,1675,137,95,1705,984,71,1722,1526,1622,1744,94,1640,810,1809,1193,292,1884,494,95,1112,169,1180,1991,1316,1636,1540,939,1323,496,1638,780,695,823,1556,683,1634,1271,291,1953,1886,720,1902,232,1197,1655,1363,800,569,166,1811,1435,1518,585,918,369,1676,451,629,1645,550,567,1262,494,549,1855,836,583,325,376,1501,655,438,372,914,434,748,1015,705,1150,1504,1339,206,711,1229,1181,1406,579,468,301,1179,510,1705,1521,292,1016,388,802,890,1986,113,269,1699,1029,1375,20,474,602,1108,1339,1549,1619,1464,396,1550,769,1238,419,371,1244,543,354,1543,1631,726,1998,1702,680,1540,544,1780,1468,646,1606,343,1121,1434,1327,1592,1794,406,994,599,735,737,408,868,1147,920,1613,694,1372,1594,1699,455,1486,1468,1327,550,976,950,1114,724,1989,1492,1889,968,1365,342,1734,428,1914,1153,1964,1565,179,1691,831,1262,996,35,458,102,819,775,1967,733,941,1403,147,1811,239,1945,159,1017,1358,1068,1008,1494,576,835,135,1524,16,1013,314,385,942,1079,1505,990,316,423,266,707,1826,1013,246,1112,475,84,1482,1309,422,1469,943,340,534,1709,1698,226,1186,1106,276,274,774,1266,1563,1537,704,804,1119,1923,1492,1844,734,237,552,1460,1705,1177,952,1750,1508,485,628,83,1882,1524,1325,1831,1847,1083,1244,194,748,1221,475,808,1775,192,1225,1618,1048,1085,1290,1675,1941,804,1701,1044,1894,1662,853,1489,18,1930,1577,1497,705,248,227,234,959,1601,716,1523,64,1757,1023,152,166,363,1418,1889,1212,1581,96,139,815,137,1434,918,1983,153,273,1237,1651,1852,837,273,1362,579,1513,103,923,1236,884,1365,814,1195,242,1729,1873,1684,1810,1906,1452,1666,678,613,1436,1883,1221,777,1524,1385,460,1619,1735,75,664,1355,815,962,1678,237,1242,757,948,377,1512,157,37,515,1342,170,1313,1268,1990,1980,186,855,733,234,456,1469,1219,175,742,570,1374,807,1859,837,1016,695,1762,588,1036,851,1722,1133,1517,1957,1463,1710,943,989,455,263,668,11,1854,707,17,71,610,1762,1086,1257,1136,1946,665,1873,1909,129,459,225,1493,1956,1810,1822,872,292,1805,1987,1656,1059,1892,621,1381,27,1405,1632,833,1928,520,1888,1076,969,1060,985,1736,1683,1479,1480,1150,94,26,384,680,758,218,822,1213,1355,505,789,1209,225,1019,1467,618,545,810,1097,659,1894,18,1031,92,321,229,1326,1025,1638,1608,221,303,140,516,1316,282,561,998,156,1945,1283,592,1757,1256,1720,310,310,1078,1720,1105,281,181,830,976,1995,1052,202,226,633,1096,1281,1228,766,1702,1132,809,1390,107,549,1270,511,349,349,194,1434,87,1209,132,782,1289,304,596,205,933,110,704,125,1427,309,1369,1336,430,934,1364};
        System.out.println(sumDiffrence1(num1, num2));
    }
    static int sumDiffrence1(int []num1,int []num2){
         int mod=(int)1e9+7;
        int num[]=Arrays.copyOf(num1, num1.length);
        int diff []=new int[num1.length];
        int bestdiff[]=new int[num1.length];
        Arrays.sort(num);
        for (int i = 0; i < bestdiff.length; i++) {
            diff[i]=Math.abs(num1[i]-num2[i]);
            int bs=binarySearchg(num, num2[i]);
            bestdiff[i]=Math.abs(num2[i]-bs);
        }
        int index=0;
        int max_diff_saved=0;
        for (int j = 0; j < bestdiff.length; j++) {
            if(Math.abs(diff[j]-bestdiff[j])>max_diff_saved){
                max_diff_saved =Math.abs(diff[j]-bestdiff[j]);
                index=j;
            }

        }
        int sum=0;
        for (int i = 0; i < bestdiff.length; i++) {
            if(i==index){
                sum +=bestdiff[i];
            }
            else{
                sum +=diff[i];
            }
        }
        return sum%mod;
    }
    static int binarySearchg(int [] num1,int target){
        int mid=0;
        Arrays.sort(num1);
        int start=0;
        int end=num1.length-1;
        while(start<=end){
             mid=start+(end-start)/2;
            if(num1[mid]==target){
                return target;
            }
            if(num1[mid]>target){
                if(mid>0 && target>num1[mid-1]){
                    return getCloset(num1[mid-1], mid, target);
                }
                end=mid-1;
            }
            else{
                if(mid<end && target<num1[mid+1]){
                    return getCloset(mid, num1[mid+1], target);
                }
                start=mid+1;
            }
        }
        return num1[mid];
    }
    static int getCloset(int val1,int val2,int target){
        if(target-val1>=val2-target){
            return val2;
        }
        else{
            return val1;
        }
    }
}
